import pygame
import math
import random
import numpy
import pygame_menu


pygame.init()
pygame.mixer.init()


FPS = 40
screen = pygame.display.set_mode((1000, 900))

bg = pygame.image.load("bg.png")
tank_image = pygame.image.load("tank.png")
ufo_image = pygame.image.load("ufo.png")
bullet_image = pygame.image.load("bullet.png")

pygame.mixer.music.load("primo_victoria.mp3")

RED = (150, 10, 10)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)
BROWN = (201, 102, 0)
WHITE = (255, 255, 255)
GREEN = (123, 199, 76)
GOLD = (240, 201, 62)


class Gun:
    def __init__(self):
        self.x = 200
        self.y = 790
        self.w = 10
        self.a = 1
        self.v = 10
        self.power = 10
        self.fire = False
        self.tank_rect = tank_image.get_rect(center=(self.x, self.y + 52))


    def draw_gun(self):
        if pygame.mouse.get_pos()[0] > self.x:
            pygame.draw.polygon(screen, BROWN,
                            [[self.x, self.y],
                             [self.x + self.power*2*math.cos(self.a), self.y - self.power*2*math.sin(self.a)],
                             [self.x + self.power*2*math.cos(self.a) - self.w*math.sin(self.a), self.y - self.power*2*math.sin(self.a) - self.w*math.cos(self.a)],
                             [self.x - self.w*math.sin(self.a), self.y - self.w*math.cos(self.a)]
                             ])
        if pygame.mouse.get_pos()[0] <= self.x:
            pygame.draw.polygon(screen, BROWN,
                            [[self.x, self.y],
                             [self.x - self.w*math.sin(self.a), self.y + self.w*math.cos(self.a)],
                             [self.x - self.power*2*math.cos(self.a) - self.w*math.sin(self.a), self.y - self.power*2*math.sin(self.a) + self.w*math.cos(self.a)],
                             [self.x - self.power*2*math.cos(self.a), self.y - self.power*2*math.sin(self.a)]
                             ])


    def draw_tank(self):
        self.tank_rect = tank_image.get_rect(center=(self.x, self.y+52))
        screen.blit(tank_image, self.tank_rect)


    def move_gun_r(self):
        if self.x <= 1000 - 105:
            self.x += self.v



    def move_gun_l(self):
        if 105 <= self.x:
            self.x -= self.v


    def power_up(self):
        if self.fire:
            if self.power <= 40:
                self.power += 0.5
            else:
                pass

    def fire_start_1(self):
        self.fire = True

    def fire_end_1(self):
        self.fire = False
        if pygame.mouse.get_pos()[0] > self.x:
            ball = Ball_1(self.x, self.y, self.a, self.power)
            self.power = 20
            return ball
        if pygame.mouse.get_pos()[0] <= self.x:
            ball = Ball_1(self.x, self.y, -self.a+math.pi, self.power)
            self.power = 20
            return ball

    def fire_start_2(self):
        self.fire = True

    def fire_end_2(self):
        self.fire = False
        if pygame.mouse.get_pos()[0] > self.x:
            ball = Ball_2(self.x, self.y, self.a, 0.5*self.power)
            self.power = 20
            return ball
        if pygame.mouse.get_pos()[0] <= self.x:
            ball = Ball_2(self.x, self.y, -self.a+math.pi, 0.5*self.power)
            self.power = 20
            return ball



    def targetting(self):
        if pygame.mouse.get_pos()[0] > self.x:
            self.a = math.atan((-pygame.mouse.get_pos()[1] + self.y)/(pygame.mouse.get_pos()[0] - self.x))
        if pygame.mouse.get_pos()[0] < self.x:
            self.a = math.atan((pygame.mouse.get_pos()[1] - self.y) / (pygame.mouse.get_pos()[0] - self.x))
        if pygame.mouse.get_pos()[0] == self.x:
            self.a = math.atan((-pygame.mouse.get_pos()[1] + self.y) / (pygame.mouse.get_pos()[0] - self.x + 0.00001))


class Ball_1:
    def __init__(self, x, y, a, v):
        self.x = x
        self.y = y
        self.r = 10
        self.v = v
        self.a = a
        self.vx = self.v*math.cos(self.a)
        self.vy = self.v*math.sin(self.a)
        self.life = 10

    def draw(self):
        pygame.draw.circle(screen, RED,
                           (self.x, self.y),
                           self.r
                           )

    def move_1(self):
        if self.life > 0:
            if 2*self.r < self.x < 1000 - 2*self.r:
                self.x += self.vx
            elif 2*self.r > self.x:
                self.x = 2*self.r + 1
                self.vx = -0.7*self.vx
                self.life -= 1
            elif self.x > 1000 - 2*self.r:
                self.x = 1000 - 2*self.r - 1
                self.vx = -0.7 * self.vx
                self.life -= 1
            if self.y < 851:
                self.y -= self.vy
                self.vy -= 1
            else:
                self.y = 850
                self.vy = -0.7*self.vy
                self.life -= 1
        else:
            self.r = 0


class Ball_2(Ball_1):
    def __init__(self, x, y, a, v):
        super().__init__(x, y, a, v)

    def draw(self):
        pygame.draw.circle(screen, BLUE,
                           (self.x, self.y),
                           self.r
                           )

    def move_2(self):
        if self.life > 0:
            if 2*self.r < self.x < 1000 - 2*self.r:
                self.x += self.vx
            elif 2*self.r > self.x:
                self.x = 2*self.r + 1
                self.vx = -0.7*self.vx
                self.life -= 1
            elif self.x > 1000 - 2*self.r:
                self.x = 1000 - 2*self.r - 1
                self.vx = -0.7 * self.vx
                self.life -= 1
            if self.y < 851:
                self.y -= self.vy
                self.vy += 1
            else:
                self.y = 850
                self.vy = -0.7*self.vy
                self.life -= 1
        else:
            self.r = 0



class Target:
    def __init__(self):
        self.x = random.randint(100, 900)
        self.y = random.randint(100, 600)
        self.r = random.randint(20, 60)
        self.vx = random.choice(numpy.arange(-2, 2, 0.1))
        self.vy = random.choice(numpy.arange(-2, 2, 0.1))
        self.life = 1
        self.exist = True
        self.color = ((random.randint(0,255)), (random.randint(0,255)), (random.randint(0,255)))

    def draw(self):
        pygame.draw.circle(screen, self.color,
                           (self.x, self.y),
                           self.r
                           )


    def check(self):
        if self.exist:
            return True
        else:
            return False


    def hittest(self, obj):
        if (self.x - obj.x)**2 + (self.y - obj.y)**2 <= (self.r + obj.r)**2:
            self.exist = False
        else:
            pass


    def move(self):
        if self.r < self.x < 1000 - self.r:
            self.x += self.vx
        elif self.r >= self.x:
            self.x = self.r + 1
            self.vx = -self.vx
        elif self.x >= 1000 - self.r:
            self.x = 1000 - self.r - 1
            self.vx = -self.vx
        if self.r < self.y < 840 - self.r:
            self.y -= self.vy
        elif self.r >= self.y:
            self.y = self.r + 1
            self.vy = -self.vy
        elif self.y >= 840 - self.r:
            self.y = 840 - self.r - 1
            self.vy = -self.vy


class Ufo:
    def __init__(self):
        self.x = 900
        self.y = 300
        self.v = 2


    def draw(self):
        ufo_rect = ufo_image.get_rect(center=(self.x, self.y))
        screen.blit(ufo_image, ufo_rect)



    def move(self):
        if 100 <= self.x <= 900:
            self.x += self.v
        else:
            self.v = -self.v
            self.x += self.v

    def fire(self):
        bullet = Bullet(self.x, self.y)
        return bullet


class Bullet:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.rect = bullet_image.get_rect(center=(self.x, self.y))

    def move(self):
        self.y += 3


    def draw(self):
        self.rect = bullet_image.get_rect(center=(self.x, self.y))
        screen.blit(bullet_image, self.rect)


    def hittest(self, obj):
        if self.rect.colliderect(obj):
            return True
        else:
            return False


finished = True

def start_the_game():
    finished = False
    N = 0
    t = 0
    total_points = 0
    balls = []
    targets = []
    bullets = []
    ufo = Ufo()
    gun = Gun()
    balls_fired = 0

    f = pygame.font.SysFont('arial', 40)
    clock = pygame.time.Clock()
    pygame.mixer.music.play(-1)

    while not finished:
        screen.blit(bg, (0, 0))
        screen.blit(f.render('Очки:'+str(total_points), 1, BLACK), (10, 30))
        screen.blit(f.render('Потрачено патронов:' + str(balls_fired), 1, BLACK), (10, 70))
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                finished = True
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    gun.fire_start_1()
                if event.button == 3:
                    gun.fire_start_2()
            elif event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    ball = gun.fire_end_1()
                    balls.append(ball)
                    balls_fired += 1
                if event.button == 3:
                    ball = gun.fire_end_2()
                    balls.append(ball)
                    balls_fired += 1



        keys = pygame.key.get_pressed()
        if keys[pygame.K_a]:
            gun.move_gun_l()
        elif keys[pygame.K_d]:
            gun.move_gun_r()
        if t <= 120:
            t += 1
        else:
            bullet = ufo.fire()
            bullets.append(bullet)
            t = 0
        if not N:
            N = 2
            for i in range(N):
                target = Target()
                targets.append(target)
        for bullet in bullets:
            if bullet.hittest(gun.tank_rect):
                total_points -= 3
                bullets.remove(bullet)
            if bullet.y >= 870:
                bullets.remove(bullet)
            bullet.move()
            bullet.draw()
        for target in targets:
            for ball in balls:
                target.hittest(ball)
            if target.exist:
                target.draw()
            else:
                targets.remove(target)
                N -= 1
                total_points += 1
            target.move()

        for ball in balls:
            if isinstance(ball, Ball_1):
                ball.move_1()
            if isinstance(ball, Ball_2):
                ball.move_2()
            ball.draw()
        gun.targetting()
        gun.draw_tank()
        gun.draw_gun()
        gun.power_up()
        ufo.move()
        ufo.draw()
        pygame.display.update()


menu = pygame_menu.Menu('Выживи на ФОПФе', 1000, 900, theme=pygame_menu.themes.THEME_GREEN)
menu.add.button('Play', start_the_game)
menu.add.button('Quit', pygame_menu.events.EXIT)
menu.mainloop(screen)









